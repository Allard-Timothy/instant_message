import SocketServer

conn_port = port number
conn_clients = {}


class Client:
    queue = []
    def __init__(self, conn_sock, conn_src, conn_dest):
        print "Thanks for waiting"
        self.socket = conn_sock
        print "Incoming: %s" % self.socket
        self.user = conn_src
        print "Username: " + self.user
        self.buddy = conn_dest                       # buddy_list
        print "Buddy: " + self.buddy
        print "Created Buddy"

# handling requests
class Broker(SocketServer.BaseRequestHandler):
    def handle(self):
        print "Connected from", self.client_address
        while True:
            receivedData = self.request.recv(port_number)
            if not receivedData:
                break
            
   
            if receivedData.startswith('@@@',0,3):              # success == extract client details
                print "Received"
                receivedData = receivedData.replace('@@@', '', 1).lstrip()    # strip handling code
                l = receivedData.split('##',1)
                socket = self.request
                src = l[0]
                dest = l[1]
                c = Client(socket, src, dest)
                conn_clients[src] = c                   # use username as key 
                socket.sendall('AUTH_OK')                 # send success message
                print "Client " + src + " authenticated"       

            
            if receivedData.startswith('$$$',0,3):   # if expecting request, extract sender details and send messages
                src = receivedData.replace('$$$', '', 1).lstrip()
                if len(conn_clients) > 1:              # poll if more than 1 user     
                    conn_clients[src] = c
                    if len(c.queue) < 1:
                        c.socket.sendall(" ")
                    else:
                        msgs = ""
                        for q in c.queue:
                            msgs += q + '\n'
                        c.socket.sendall(msgs)
                        c.queue = []
                        print "Sent all pending messages for " + c.user
                else:
                    socket.sendall(" ")

          
            if receivedData.startswith('###',0,3):
        
                receivedData = receivedData.replace('###', '', 1).lstrip()
                l = receivedData.split('##',1)
                src = l[0]
                text = l[1]
                if text.strip != "":
                    print "Message not empty"
                    clientSrc = conn_clients[src]   #client source
                    clientDest = conn_clients[clientSrc.buddy]     #client buddy
                    msg = src+": "+text
                    print "Adding message to list" + clientSrc.buddy
                    clientDest.queue.append(msg)
                    print "Queue of: " + clientDest.user + " = %s" % clientDest.queue
                clientDest.socket.sendall(" ")
            else:
                if len(_clients) < 2:
                    self.request.sendall(receivedData)

        for c in conn_clients.values():
            if self.request == c.socket:
                c.socket.close()
                # remove from hashmap
                del conn_clients[c.user]
                print "Removed " + c.user + " from hashmap"

        print "Disconnected", self.client_address
        
srv = SocketServer.ThreadingTCPServer(('',conn_port),Broker)
print "Started IIM server on port %d" % conn_port
srv.serve_forever()
