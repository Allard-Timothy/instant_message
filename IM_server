import SocketServer

conn_port = port_number
conn_clients = {}


class Client:
    queue = []
    def __init__(self, conn_sock, conn_src, conn_dest):
        print "You're currently waiting, duh"
        self.socket = conn_sock
        print "Heads Up, here comes: %s" % self.socket
        self.user = conn_src
        print "User: " + self.user
        self.bro = conn_dest                       # bro_list :-)
        print "Bro: " + self.buddy
        print "Created Bro"


class Handler(SocketServer.BaseRequestHandler):
    def handle(self):
        print "Connected to", self.client_address
        while True:
            receivedData = self.request.recv(port_number)
            if not receivedData:
                break
            
   
            if receivedData.startswith('%%%',0,3):              # client details
                print "Success"
                receivedData = receivedData.replace('%%%', '', 1).lstrip()    # get handling code
                QD = receivedData.split('##',1)
                socket = self.request
                src = QD[0]
                dest = QD[1]
                client = client(socket, src, dest)
                conn_clients[src] = client                  # use username as key 
                socket.sendall('AUTH_OK')                 # send success message
                print "Connected " + src + "Success "       

            
            if receivedData.startswith('$$$',0,3):   # send details to user
                src = receivedData.replace('$$$', '', 1).lstrip()
                if len(conn_clients) > 1:              # check if more than 1 user     
                    conn_clients[src] = c
                    if len(client.queue) < 1:
                        client.socket.sendall(" ")
                    else:
                        msgs = ""
                        for q in client.queue:
                            msgs += q + '\n'
                        client.socket.sendall(msgs)
                        client.queue = []
                        print "Sent all pending messages for " + client.user
                else:
                    socket.sendall(" ")

          
            if receivedData.startswith('&&&',0,3):
        
                receivedData = receivedData.replace('###', '', 1).lstrip()
                QD = receivedData.split('##',1)
                src = QD[0]
                text = QD[1]
                if text.strip != "":
                    print "Got some stuff here"
                    clientSrc = conn_clients[src]   #client source
                    clientDest = conn_clients[clientSrc.bro]     #client bro
                    msg = src+": "+text
                    print "Adding message to list" + clientSrc.bro
                    clientDest.queue.append(msg)
                    print "Queue of: " + clientDest.user + " = %s" % clientDest.queue
                clientDest.socket.sendall(" ")
            else:
                if len(_clients) < 2:
                    self.request.sendall(receivedData)

        for client in conn_clients.values():
            if self.request == client.socket:
                client.socket.close()
                del conn_clients[client.user]
            

        print "Disconnected", self.client_address
        
server = SocketServer.ThreadingTCPServer(('',conn_port),Handler)
server.serve_forever()
